\BOOKMARK [1][-]{section.1}{Présentation générale}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{Niveaux\040d'abstraction}{section.1}% 2
\BOOKMARK [2][-]{subsection.1.2}{Relation de génération entre les deux niveaux}{section.1}% 3
\BOOKMARK [1][-]{section.2}{Présentation technique}{}% 4
\BOOKMARK [2][-]{subsection.2.1}{Conception générale}{section.2}% 5
\BOOKMARK [2][-]{subsection.2.2}{Manipuler facilement le système d'acteurs avec SystemProxy}{section.2}% 6
\BOOKMARK [2][-]{subsection.2.3}{Construire à la volée un message d'action en fonction d'un message émis avec MessageMap}{section.2}% 7
\BOOKMARK [2][-]{subsection.2.4}{Tirer à la volée une ligne téléphonique entre deux acteurs avec Commutator}{section.2}% 8
\BOOKMARK [2][-]{subsection.2.5}{Définir un envoi de message automatique avec RandomScheduler}{section.2}% 9
\BOOKMARK [1][-]{section.3}{Formalisation des recettes : vers une généralisation ?}{}% 10
\BOOKMARK [2][-]{subsection.3.1}{Rappels mathématiques}{section.3}% 11
\BOOKMARK [2][-]{subsection.3.2}{Définitions}{section.3}% 12
\BOOKMARK [1][-]{section.4}{Vers un système d'acteurs auto-organisé ?}{}% 13
\BOOKMARK [1][-]{section.5}{Un défaut conceptuel : le serpent qui se mord la queue}{}% 14
\BOOKMARK [1][-]{section.6}{Ajouter la notion de groupe d'objets et de propriétaire}{}% 15
\BOOKMARK [1][-]{section.7}{Prévenir les situations aberrantes}{}% 16
\BOOKMARK [1][-]{section.8}{What « Model \(in mvc\) is an abstraction of Actor » is and how we could implement it}{}% 17
\BOOKMARK [1][-]{section.9}{Lien entre une recette et une relation de causalité}{}% 18
\BOOKMARK [1][-]{section.10}{Utilisation}{}% 19
\BOOKMARK [1][-]{section.11}{Dernière soutenance}{}% 20
